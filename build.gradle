apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'eclipse'
apply plugin: 'com.jfrog.artifactory'

version = '0.2-SNAPSHOT'
group = 'edu.gcsc.lua'

if (System.env['TRAVIS'] != null) {
    project.ext.set ("buildInfo.build.number", System.env.TRAVIS_BUILD_NUMBER)
    project.ext.set ("buildInfo.build.name", rootProject.name)
} else {
    project.ext.set ("buildInfo.build.number", '0' )
    project.ext.set ("buildInfo.build.name", rootProject.name+"-local")
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	
wrapper {
    gradleVersion = '5.1'
}

repositories {
    mavenCentral()
    mavenLocal()
    
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
    
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
 
    maven {
        name 'JFrog OSS snapshot repo'
        url  'https://oss.jfrog.org/oss-snapshot-local/'
    }  
}

buildscript {
    repositories {
    	maven {
            url 'http://oss.jfrog.org/artifactory/plugins-release'    
        }
        maven {
            name 'jcenter'
            url  'http://jcenter.bintray.com'
        }
    }

    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.0.1')
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.easymock', name: 'easymock', version: '3.3'

    implementation (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.4+')

    implementation "org.antlr:antlr4-runtime:4.5"

    implementation (group: 'edu.gcsc.lua', name: 'luaautocomplete', version: '0.2-SNAPSHOT')
    implementation (group: 'edu.gcsc.lua', name: 'ug4luaautocomplete', version: '0.2-SNAPSHOT')
    
    
    implementation (group: 'org.luaj', name: 'luaj-jse', version: '3.0')
    implementation (group: 'org.luaj', name: 'luaj-jse', version: '3.0', classifier: 'sources')
    implementation (group: 'org.luaj', name: 'luaj-jse', version: '3.0', classifier: 'javadoc')
}

def loadProperties(String sourceFileName) {
    
    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)
    
    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            jar
        }
    }
}

//artifactory {
//    contextUrl = "http://oss.jfrog.org/artifactory" 
//    publish {
//        repository {
//            repoKey = 'oss-snapshot-local'
//            username = "turpid-monkey"
//            password = System.getenv()['bintrayKey']
//            maven = true
//        }
//        defaults {
//            publications ('mavenJava')
//        }
//    }
//    resolve {
//        repository {
//            repoKey = 'libs-release'
//            maven = true           
//        }
//    }
//}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
        filter({file->return !file.name.startsWith("vrl-0")}).
        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDirs)
}

// loads the property file
loadProperties('build.properties')

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) {
    doLast {
        def vrlPluginPath = System.getenv()['HOME'] + "/" + vrldir+ "/plugin-updates"
        println(">> copying vrl plugin to: " + vrlPluginPath)
        copy {
            from buildDir.getPath()+"/libs/"+rootProject.name + "-" + rootProject.version + ".jar"
            into vrlPluginPath
            include '**/*.jar'
        }
    }
}
