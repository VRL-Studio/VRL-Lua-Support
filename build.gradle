apply plugin: 'java'

sourceCompatibility = '1.6'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	
task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
    
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.2.8.6-SNAPSHOT')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.2.8.6-SNAPSHOT', classifier: 'sources')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.2.8.6-SNAPSHOT', classifier: 'javadoc')
    
    
    compile (group: 'org.luaj', name: 'luaj-jse', version: '3.0')
    compile (group: 'org.luaj', name: 'luaj-jse', version: '3.0', classifier: 'sources')
    compile (group: 'org.luaj', name: 'luaj-jse', version: '3.0', classifier: 'javadoc')
}

def loadProperties(String sourceFileName) {
    
    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)
    
    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
        filter({file->return !file.name.startsWith("vrl-0")}).
        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDir)
}

// loads the property file
loadProperties('build.properties')

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) << {
    println(">> copying vrl plugin to: " + vrldir+"/plugin-updates")
    copy {
        from buildDir.getPath()+"/libs/"+rootProject.name + ".jar"
        into vrldir+"/plugin-updates"
        include '**/*.jar'
    }
}
